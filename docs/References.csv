Key,Item Type,Publication Year,Author,Title,Publication Title,ISBN,ISSN,DOI,Url,Abstract Note,Date,Pages,Num Pages,Issue,Volume,Number Of Volumes,Journal Abbreviation,Short Title,Series,Series Number,Series Text,Series Title,Publisher,Place,Language,Rights,Type,Archive,Archive Location,Library Catalog,Call Number,Extra,Notes,File Attachments,Link Attachments,Manual Tags,Automatic Tags,Editor,Series Editor,Translator,Contributor,Attorney Agent,Book Author,Cast Member,Commenter,Composer,Cosponsor,Counsel,Interviewer,Producer,Recipient,Reviewed Author,Scriptwriter,Words By,Guest,Number,Edition,Running Time,Scale,Medium,Artwork Size,Filing Date,Application Number,Assignee,Issuing Authority,Country,Meeting Name,Conference Name,Court,References,Reporter,Legal Status,Priority Numbers,Programming Language,Version,System,Code,Code Number,Section,Session,Committee,History,Legislative Body
L6439G9J,journalArticle,,"Kunwar, Harish",Final Year Project (CS6PO5),,,,,,,,15,,,,,,,,,,,,,en,,,,,Zotero,,,,/Users/harrykd/Documents/Courseworks/FYP/Documenation/Proposal.pdf,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
7EGXBGR5,videoRecording,2017,,Episode 1: A basic expression evaluator,,,,,https://www.youtube.com/watch?v=wgHIkdUQbp0&list=PLRAdsfhKI4OWNOSfS7EUu5GRAVmze1t2y&index=2&t=0s,,2017-12-29,,,,,,,Episode 1,,,,,,,,,,,,YouTube,,,,,,,,,,,,,,,,,,,,,,,,,,,,1:38:35,,,,,,,,,,,,,,,,,,,,,,,,,
LBWU2IW5,videoRecording,2017,,Making a Programming Language in Python - Part 3 - Lexer (1),,,,,https://www.youtube.com/watch?v=jUWTNlqZRSQ&list=PLP7hn9TNf1CEl8A8jQfZSRYcgUIqBhIJU&index=3,,2017-08-26,,,,,,,,,,,,,,,,,,,YouTube,,,,,,,,,,,,,,,,,,,,,,,,,,,,10:57,,,,,,,,,,,,,,,,,,,,,,,,,
3J4JEFG6,computerProgram,2020,"Maugin, Ryan",RyanMaugin/Tachyon,,,,,https://github.com/RyanMaugin/Tachyon,Experimental Programming Language Coded in Python!,2020-07-18,,,,,,,,,,,,,,,"View license         ,                 View license",,,,GitHub,,original-date: 2017-05-26T20:44:15Z,,,,,compiler; language; programming-language; toy-language,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Python,,,,,,,,,
TIYWVTSI,computerProgram,2020,"Yliluoma, Joel",bisqwit/compiler_series,,,,,https://github.com/bisqwit/compiler_series,Material for the Creating a Compiler video lesson series.,2020-08-07,,,,,,,,,,,,,,,"BSD-2-Clause License         ,                 BSD-2-Clause License",,,,GitHub,,original-date: 2017-12-28T15:03:57Z,,,,#fyp,compiler; cpp; educational; lessons; videos; youtube,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Yacc,,,,,,,,,
8UPZL8L4,webpage,2017,,"I wrote a programming language. Here’s how you can, too.",freeCodeCamp.org,,,,https://www.freecodecamp.org/news/the-programming-language-pipeline-91d3f449c919/,"by William W Wold I wrote a programming language. Here’s how you can, too. Over the past 6 months, I’ve been working on a programming language called Pinecone. I wouldn’t call it mature yet, but it already has enough features working to be usable, such as:  * variables  * functions  * user defined structures If you’re interested in it, check out Pinecone’s landing page [https://pinecone-lang.herokuapp.com/index.html]  or its GitHub repo [https://github.com/william01110111/Pinecone]. I’m not",2017-03-31,,,,,,,,,,,,,,en,,,,,,,,,/Users/harrykd/Zotero/storage/XYKUVR7R/the-programming-language-pipeline-91d3f449c919.html,,#fyp,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
K2HSATMT,webpage,,,Writing a Simple Programming Language from Scratch - Part 1,DEV Community,,,,https://dev.to/evantypanski/writing-a-simple-programming-language-from-scratch-part-1-54a2,Why and how to write a simple programming language,,,,,,,,,,,,,,,en,,,,,,,,,/Users/harrykd/Zotero/storage/PY6IN5CK/writing-a-simple-programming-language-from-scratch-part-1-54a2.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
QUV5J5I5,journalArticle,,"Aaby, Anthony A",Compiler Construction using Flex and Bison,,,,,,,,102,,,,,,,,,,,,,en,,,,,Zotero,,,,/Users/harrykd/Zotero/storage/U5FK5DGS/Aaby - Compiler Construction using Flex and Bison.pdf,,fyp,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
6K4ADJQ3,webpage,2018,,Compilers 101: Build your own flex + bison compiler in a few easy(?) steps,,,,,https://starbeamrainbowlabs.com/blog/article.php?article=posts%2F267-Compilers-101.html,"So you want to build your own compiler? Great! Don't know where to start? This guide should help! At University, we're building our own compiler for a.... (click to read more)",2018-02-01,,,,,,,Compilers 101,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/W7EPSCUD/article.html,,fyp,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
7DVWSED5,computerProgram,2020,xkbeyer,xkbeyer/liquid,,,,,https://github.com/xkbeyer/liquid,"Toy programming language using LLVM, flex and bison.",2020-07-13,,,,,,,,,,,,,,,"MIT License         ,                 MIT License",,,,GitHub,,original-date: 2015-06-11T17:30:19Z,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,C++,,,,,,,,,
UQTFM6RC,webpage,2018,"Ago, Drifter1in #utopian-Io • 2 Years",Writing a simple Compiler on my own - Combine Flex and Bison,Steemit,,,,https://steemit.com/utopian-io/@drifter1/writing-a-simple-compiler-on-my-own-combine-flex-and-bison,Image source:       Introduction   Hello it's a me Drifter Programming! Today we continue with my   Compiler Series  … by drifter1,2018-03-30,,,,,,,,,,,,,,en,,,,,,,,,/Users/harrykd/Zotero/storage/T6HWGXZ9/writing-a-simple-compiler-on-my-own-combine-flex-and-bison.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ASIEGLJD,webpage,2020,"Andrade, Marcelo",Writing your own programming language and compiler with Python,Medium,,,,https://blog.usejournal.com/writing-your-own-programming-language-and-compiler-with-python-a468970ae6df,Introduction,2020-05-27,,,,,,,,,,,,,,en,,,,,,,,,/Users/harrykd/Zotero/storage/9DQXLFZ4/writing-your-own-programming-language-and-compiler-with-python-a468970ae6df.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LBRM3Y8J,webpage,,,"Flex and Bison for a Simple Language, MITScript","Tack, Hunt, Pool",,,,http://raywang.tech/2017/03/07/Flex-and-Bison-for-a-simple-language-MITScript/index.html,"For the first lab in 6.035, Computer Language Engineering, in Spring 2017, we use Flex, a lexical analyzer library, and Bison, a parser generator, to create a parser for a simple scripting language. T",,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/FQ8DJ3FH/Flex-and-Bison-for-a-simple-language-MITScript.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PTXIXKE4,webpage,,repl.it,Making your own programming language with Python,repl.it,,,,https://repl.it/talk/learn/Making-your-own-programming-language-with-Python/45767,"Making your own programming language with Python Why make your own language? When you write your own programming language, you control the entire programmer experience.  This allows you to shape exact how each aspect of your language works and how a developer interacts with it.  This allows you to make a language with things you like from other languages and none of the stuff you don't.  In addition, learning about programming language internals can help you better understand the internals of programming languages you use every day, which can make you a better programmer. How programming languages work Every programming language is different in the way it runs, but many consist of a couple fundamental steps: lexing and parsing. Introduction to Lexing Lexing is short for LEXical analysis.  The lex step is where the language takes the raw code you've written and converts it into an easily parsable structure. This step interprets the syntax of your language and turns next into special symbols inside the language called tokens.  For example, let's say you have some code you want to parse. To keep it simple I'll use python-like syntax, but could be anything. It doesn't even have to be text.  A lexer to parse this code might do the following: Discard all comments Produce a token that represents a variable name Produce left and right parenthesis tokens Convert literals like numbers or strings to tokens Produce tokens for nath operations like   (and maybe bitwise/logical operators as well) The lexer will take the raw code and interpret it into a list of tokens.  The lexer can also be used to insure that two pieces of code that may be different, like   and   are still parsed the same way.  For the code above, it might generate tokens like this:  Tokens can be in many forms, but the main idea here is that they are a standard and easy to parse way of representing the code. Introduction to Parsing The parser is the next step in the running of your language. Now that the lexer has turned the text into consistent tokens, the parser simplifies and executes them. Parser rules recognize a sequence of tokens and do something about them. Let's look at a simple example for a parser with the same tokens as above. A simple parser could just say: If I see the   token and then a   token, print   and the the name. A more complicated parser aiming to parse the code above might have these rules, which we will explore later: Try to classify as much code as possible as an expression. By ""as much code as possible"" I mean the parser will first try to consider a full mathematical operation as an expression, and then if that fails convert a single variable or number to an expression. This ensure that as much code as possible will be matched as an expression. The ""expression"" concept allows us to catch many patterns of tokens with one piece of code. We will use the expression in the next step. Now that we have a concept of an expression, we can tell the parser that if it sees the tokens   and then an expression, that means a variable is being assigned.  Using PLY to write your language What is PLY? Now that we know the basics of lexing and parsing, lets start writing some python code to do it. PLY stands for Python Lex Yacc.  It is a library you can use to make your own programming language with python. Lex is a well known library for writing lexers. Yacc stands for ""Yet Another Compiler Compiler"" which means it compiles new languages, which are compilers themself. This tutorial is a short example, but  the PLY documentation  is an  amazing  resource with tons of examples. I would highly recommend that you check it out if you are using PLY. For this example, we are going to be building a simple calculator with variables. If you want to see the fully completed example, you can fork this repl:  TODO!! Lexing with PLY lex Lexer tokens Lets start our example! Fire up a new python repl and follow along with the code samples. To start off, we need to import PLY: Now let's define our first token. PLY requires you to have a   list which contains every token the lexer can produce. Let's define our first token,   for the plus sign: A string that looks like   is special in python. The   prefix means ""raw"" which includes backslashes in the string. For example, to make define the string   in python, you could either do   or  . We are going to be using a lot of backslashes, so raw strings make things a lot easier. But what does   mean?  Well in the lexer, tokens are mainly parsed using regexes.  A regex is like a special programming language specifically for matching patterns in text.  A great resource for regexes is  regex101.com  where you can test your regexes with syntax highlighting and see explanations of each part.  I'm going to explain the regexes included in this tutorial, but if you want to learn more you can play around with regex101 or read one of the many good regex tutorials on the internet. The regex   means ""match a single character +"".  We have to put a backshlash before it because   normally has a special meaning in regex so we have to ""escape"" it to show we want to match a   literally. We are also required to define a function that runs when the lexer encounters an error: This function just prints out a warning when it hits a character it doesn't recognize and then skips it (the   means repr so it will print out quotes around the character).  You can change this to be whatever you want in your language though. Optionally, you can define a newline token which isn't produced in the output of the lexer, but keeps track of each line.  Since this token is a function, we can define the regex in docstring of the function instead.  The function takes a paramater t, which is a special object representing the match that the lexer found. We can access the   using the the   attribute. This function matches at least one newline character and then increases the line number by the amount that it sees. This allows the lexer to known what line number its on at all times using the   variable. Now we can use the line number in our error function: Let's test out the lexer!  This is just some temporary code, you don't have to know what this code does, because once we implement a parser, the parser will run the lexer for you.  Play around with the value passed to  .  You should notice that any character other than a plus sign makes the error message print out, but doesn't crash the program.  In your language, you can make it gracefully ignore lex errors like this or make it stop running by editing the   function.  If you add more lines to the input string, the line number in the error message should change.  More complicated tokens Let's delete the test token add some more complicated tokens.  Replace your tokens list and the   line with the following code: Let's explore the regex we have in the   function.  This regex is more complicated that the simple ones we've used before. First, we have  . This is a character class in regex. It means, match any lowercase letter, uppercase letter, or underscore.  Next we have  . This is the same as above except numbers are also included. Finally, we have  . This means ""repeat the previous group or class zero to unlimited times"". Why do we structure the regex like this?  Having two separate classes makes sure that the first one  must  match for it to be a valid variable.  If we exclude numbers from the first class, it not only doesn't match just regular numbers, but makes sure you can't start a variable with a number.  You can still have numbers in the variable name, because they are matched by the second class of the regex. In the code, we first have a dictionary of reserved names.  This is a mapping of patterns to the token type that they should be.  The only one we have says that   should be mapped to the   token.  The code that sets up the tokens list takes all of the possible reserved token values, in this is example its just   and adds on  , giving us   automatically! But why do we have to do this? Couldn't we just use something like the following code? Actually, if we used that code,   would never be matched! The lexer would match it with the   token. In order to avoid this, we define a new type of token which is a function. This function has the regex as its docstring and is passed a   paramater. This paramater has a   attribute which is the pattern matched.  The code inside this function simply checks if this value is one of the special reserved names we defined before. If it is, we set the special   attribute of the   paramter. This   controls the type of token which is produced from the pattern. When it sees the name greet, it will see greet is in the reserved names dictionary and produce a token type of   because that is the corresponding value in the dictionary. Otherwise, it will produce a   token because this is a regular variable. This allows you to add more reserved terms easily later, its as simple as adding a value to the dictionary. If needed, you could make also make the key of the reserved names dicitonary a regex and the match each regex against   in the function. If you want to change these rules for your language, feel free! Parsing with PLY yacc Fair warning: Yacc can sometimes be hard to use and debug, every if you know python well.  Keep in mind, you don't have to use both lex and yacc, if you want you can just use lex and then write your own code to parse the tokens. With that said lets get started. Yacc basics Before we get started, delete the lexer testing code (everything from   onward).  When we run the parser, the lexer is automatially run. Let's add our first parser rule! Let's break this down.  Again, we have information on the rule in the docstring. This information is called a BNF Grammar. A statement in BNF Grammar consists of a grammar rule known as a  non-terminal  and  terminals .  In the example above,   is the non-terminal and   are terminals.  The left-hand side describes what is produced by the rule, and the right-hand side describes what matches the rule.  The right hand side can also have non-terminals in it, just be careful to avoid infinite loops.  Basically, the   parser works by pushing tokens onto a stack, and looking at the current stack and the next token and seeing if they match any rules that it can use to simplify them.  Here  is a more in-depth explanation and example.  Before the above example can run, we still have to add some more code.  Just like for the lexer, the error handler is required: Now let's create and run the parser: If you run this code you should see: The first line is the list version of the object passed to the parser function. The first value is the   that will be produced from the function, so it is  . Next, we have the values of the tokens we specified in the rule.  This is where the   part comes from. This is the third item in the array, which is the   token, so our parser prints out  ! Note: Creating the parser tables is a relatively expensive operation, so the parser creates a file called   which it can load the parse tables from if they haven't changed.  You can change this filename by passing a kwarg into the   initialization, like  More complicated parsing: Calculator This example is different from our running example, so I will just show a full code example and explain it.  First we start off with the tokens: numbers, mathematical operations, and parenthesis.  You might notice that I didn't use the   trick, but you can implement it if you want. Next we have a simple number token which matches 0-9 with   and then converts its value from a string to an integer. The next code we haven't used before is  .  This variable represents a list of all characters the lexer should ignore, which is   which means spaces and tabs.  When the lexer sees these, it will just skip them. This allows users to add spaces without it affecting the lexer. Now we have 3 parser directives.  The first is a large one, producing an expression from 4 possible input values, one for each math operation.  Each input has an   on either side of the math operator. Inside this directive, we have some (pretty ugly) code that performs the correct operation based on the operation token given.  If you want to make this prettier, consider a dictionary using the python stdlib   module. Next, we define an expression with parenthesis around it as being the same as the expression inside.  This makes parenthesis value be substituted in for them, making them evaluate inside first.  With very little code we created a very complicated rule that can deal with nested parenthesis correctly. Finally, we define a number as being able to be an expression, which allows a number to be used as one of the expressions in rule 1. For a challenge, try adding variables into this calculator!  You should be able to set variables by using syntax like   and you should be able to use variables in expressions.  If you're stuck, see one solution  from the PLY docs . Thats it! Thanks for reading! If you have questions, feel free to ask on  the Replit discord 's   channel, or just the comments.  Have fun!",,,,,,,,,,,,,,,en,,,,,,,,,/Users/harrykd/Zotero/storage/3327VJVJ/45767.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
VF93X5XW,webpage,,,PLY (Python Lex-Yacc),,,,,https://www.dabeaz.com/ply/ply.html,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/G5YY4SS8/ply.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
T523A9MX,blogPost,2020,,How to Create a Programming Language using Python?,GeeksforGeeks,,,,https://www.geeksforgeeks.org/how-to-create-a-programming-language-using-python/,"A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",2020-07-04,,,,,,,,,,,,,,en-US,,,,,,,Section: Compiler Design,,/Users/harrykd/Zotero/storage/LUAF83TM/how-to-create-a-programming-language-using-python.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
A3PTGPV9,blogPost,2020,,Difference between Compiler and Interpreter,GeeksforGeeks,,,,https://www.geeksforgeeks.org/difference-between-compiler-and-interpreter/,"A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",2020-04-12,,,,,,,,,,,,,,en-US,,,,,,,Section: Compiler Design,,/Users/harrykd/Zotero/storage/NLCLHEHF/difference-between-compiler-and-interpreter.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
B8QYXGPC,computerProgram,2020,"Khandelwal, Chirag",Electrux/Ethereal,,,,,https://github.com/Electrux/Ethereal,Ethereal Language Reference Implementation (archived). Currently working on Feral,2020-08-07,,,,,,,,,,,,,,,"GPL-3.0 License         ,                 GPL-3.0 License",,,,GitHub,,original-date: 2019-06-03T17:18:48Z,,,,,language; bytecode-interpreter; cxx; interpreted-language; interpreted-programming-language; interpreter; scripting-language,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,C++,,,,,,,,,
HCVXUB5Q,webpage,2015,"Spivak, Ruslan",Let’s Build A Simple Interpreter. Part 1.,Ruslan's Blog,,,,https://ruslanspivak.com/lsbasi-part1/,"“If you don’t know how compilers work, then you don’t know how computers work. If you’re not 100% sure whether you know how compilers work, then you don’t know how they work.” — Steve Yegge There you have it. Think about it. It doesn’t really matter …",2015-06-15,,,,,,,,,,,,,,en,,,,,,,Section: blog,,/Users/harrykd/Zotero/storage/QZ5NAEYW/lsbasi-part1.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
3BT54ZXM,webpage,2018,"Ago, Drifter1in #programming • 2 Years",Writing a simple Compiler on my own - Creating a grammar for our Language,Steemit,,,,https://steemit.com/programming/@drifter1/writing-a-simple-compiler-on-my-own-creating-a-grammar-for-our-language,Hello it's a me again Drifter Programming! Today we get to my Compiler series again to create a grammar for our… by drifter1,2018-03-27,,,,,,,,,,,,,,en,,,,,,,,,/Users/harrykd/Zotero/storage/E6S6FDTY/writing-a-simple-compiler-on-my-own-creating-a-grammar-for-our-language.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LLNNN5GS,webpage,2009,,"Writing Your Own Toy Compiler Using Flex, Bison and LLVM",,,,,http://gnuu.org/2009/09/18/writing-your-own-toy-compiler/,"Update (March 19 2010): this article was updated for LLVM 2.6 thanks to a great patch by John Harrison. He rocks! I’ve always been interested in compilers and languages, but interest only gets you so far. A lot of the concepts of compiler design can easily go way over most programmers’ heads, even the intelligent ones. Needless to say, I’ve tried, without much success, to write a small toy language/compiler before.",2009-09-18,,,,,,,,,,,,,,en-us,,,,,,,,,/Users/harrykd/Zotero/storage/EG374255/writing-your-own-toy-compiler.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IALIU6IZ,blogPost,2020,"Tomassetti, Gabriele","Why you should not use (f)lex, yacc and bison",Federico Tomassetti - Software Architect,,,,https://tomassetti.me/why-you-should-not-use-flex-yacc-and-bison/,"Flex and Bison works, but every day they become less of a good choice. There are much better options and we will explain why.",2020-03-04,,,,,,,,,,,,,,en-US,,,,,,,,,/Users/harrykd/Zotero/storage/ITK4QM94/why-you-should-not-use-flex-yacc-and-bison.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
F34U6UID,computerProgram,2020,"Reidel, Jens",Gelbpunkt/mamba-lang,,,,,https://github.com/Gelbpunkt/mamba-lang,"A language built on top of python, with JS flavours",2020-05-24,,,,,,,,,,,,,,,"MIT License         ,                 MIT License",,,,GitHub,,original-date: 2018-11-11T12:18:01Z,,,,,language; programming-language; lex; ply; python3; yacc,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Python,,,,,,,,,
5EHNA8V2,webpage,,262588213843476,A command to calculate lines of code in all tracked files in a Git repo,Gist,,,,https://gist.github.com/mandiwise/dc53cb9da00856d7cdbb,A command to calculate lines of code in all tracked files in a Git repo - Count lines in Git repo,,,,,,,,,,,,,,,en,,,,,,,,,/Users/harrykd/Zotero/storage/J5FMQJ9K/dc53cb9da00856d7cdbb.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DUYJ5EKA,computerProgram,2020,IP2Location,ip2location/IP2Location-Python,,,,,https://github.com/ip2location/IP2Location-Python,"This module is a Python Library that enables the user to find the country, region, city, coordinates, zip code, ISP, domain name, timezone, connection speed, IDD code, area code, weather station co...",2020-07-19,,,,,,,,,,,,,,,"MIT License         ,                 MIT License",,,,GitHub,,original-date: 2018-07-11T06:03:19Z,,,,#Python,geolocation; geolocation-lookup; ip-checker; ip-geolocation; ip-lookup; ip2location; python; python-library,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Python,,,,,,,,,
4XUNTW2E,videoRecording,,,The Forgotten Art of Structured Programming - Kevlin Henney [C++ on Sea 2019],,,,,https://www.youtube.com/watch?v=SFv8Wm2HdNM,,,,,,,,,,,,,,,,,,,,,YouTube,,,,,,,,,,,,,,,,,,,,,,,,,,,,1:29:26,,,,,,,,,,,,,,,,,,,,,,,,,
VED9APEX,webpage,,,Building Git – shop.jcoglan.com,,,,,https://shop.jcoglan.com/building-git/,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/VP3NKF6I/building-git.html,,extra,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
KW5X58YY,computerProgram,2020,"Singh, Samrat Man",samrat/rug,,,,,https://github.com/samrat/rug,"A stripped-down version of Git, implemented in Rust",2020-05-25,,,,,,,,,,,,,,,"MIT License         ,                 MIT License",,,,GitHub,,original-date: 2019-06-10T10:26:21Z,,,,,git; rust; version-control-system,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Rust,,,,,,,,,
I7TFZ8XG,webpage,,,My First Language Frontend with LLVM Tutorial — LLVM 12 documentation,,,,,https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/SXAL5H5Z/index.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
7M8BZSEN,webpage,,,Contents • Build Your Own Lisp,,,,,http://www.buildyourownlisp.com/contents,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/9D933BHT/contents.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
IS4AA66M,webpage,2012,,"Create a working compiler with the LLVM framework, Part 1",,,,,http://www.ibm.com/developerworks/library/os-createcompilerllvm1/index.html,The LLVM compiler infrastructure provides a powerful way to optimize your applications regardless of the programming language you use. Learn the basics of the LLVM in this first article of a two-part series. Building a custom compiler just got easier!,2012-06-19,,,,,,,,,,,,,,en,© Copyright IBM Corporation 2012,,,,,,,,/Users/harrykd/Zotero/storage/BK4LDQER/index.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
93BR7QRS,webpage,2014,,Peter's gdb Tutorial: Table Of Contents,,,,,http://web.archive.org/web/20140910051410/http://www.dirac.org/linux/gdb/,,2014-09-10,,,,,,,Peter's gdb Tutorial,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/E63KNH7Y/gdb.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
747C5AZU,webpage,,,(An ((Even Better) Lisp) Interpreter (in Python)),,,,,https://norvig.com/lispy2.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
7HTSIL9V,webpage,,,eliben/pykaleidoscope,GitHub,,,,https://github.com/eliben/pykaleidoscope,Implementation of the LLVM tutorial in Python. Contribute to eliben/pykaleidoscope development by creating an account on GitHub.,,,,,,,,,,,,,,,en,,,,,,,,,/Users/harrykd/Zotero/storage/H7EPFZES/chapter7and8.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
KZ88RGUQ,computerProgram,2020,"Guérin, Frédéric",frederickjeanguerin/pykaleidoscope,,,,,https://github.com/frederickjeanguerin/pykaleidoscope,Kaleidoscope using Python and llvmlite. Contribute to frederickjeanguerin/pykaleidoscope development by creating an account on GitHub.,2020-08-19,,,,,,,,,,,,,,,,,,,GitHub,,original-date: 2016-08-09T18:39:39Z,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Python,,,,,,,,,
QTXBBSFK,webpage,,,(How to Write a (Lisp) Interpreter (in Python)),,,,,https://norvig.com/lispy.html,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/L3Q4PDQB/lispy.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
4K4PLMGP,webpage,2020,"Andrade, Marcelo",Writing your own programming language and compiler with Python,Medium,,,,https://blog.usejournal.com/writing-your-own-programming-language-and-compiler-with-python-a468970ae6df,Introduction,2020-05-27,,,,,,,,,,,,,,en,,,,,,,,,/Users/harrykd/Zotero/storage/LYRMSC8P/writing-your-own-programming-language-and-compiler-with-python-a468970ae6df.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
J6F7EBPI,videoRecording,2013,,Stop Writing Classes,,,,,https://www.youtube.com/watch?v=o9pEzgHorH0,,2013-03-01,,,,,,,,,,,,,,,,,,,YouTube,,,,,,,,,,,,,,,,,,,,,,,,,,,,27:28,,,,,,,,,,,,,,,,,,,,,,,,,
MPQGH3K8,videoRecording,,,Ex-Trump Adviser Steve Bannon Arrested and Charged with Fraud: A Closer Look,,,,,https://www.youtube.com/watch?v=TxHhgSIjxDc,,,,,,,,,Ex-Trump Adviser Steve Bannon Arrested and Charged with Fraud,,,,,,,,,,,,YouTube,,,,,,,,,,,,,,,,,,,,,,,,,,,,17:37,,,,,,,,,,,,,,,,,,,,,,,,,
85PY74C4,webpage,,,Snake in a QR code,,,,,https://itsmattkc.com/etc/snakeqr/,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/5ADTUTVP/snakeqr.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
3KMVGKKA,videoRecording,2019,,Can you fit a whole game into a QR code?,,,,,https://www.youtube.com/watch?v=ExwqNreocpg,,2019-07-10,,,,,,,,,,,,,,,,,,,YouTube,,,,,,,,,,,,,,,,,,,,,,,,,,,,20:02,,,,,,,,,,,,,,,,,,,,,,,,,
YBUGPUCB,webpage,,,Tutorials - C Preprocessor Tricks - Cprogramming.com,,,,,https://www.cprogramming.com/tutorial/cpreprocessor.html,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/9PSQ6QFR/cpreprocessor.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZYGACZSI,videoRecording,,,Parsing Explained - Computerphile,,,,,https://www.youtube.com/watch?v=bxpc9Pp5pZM,,,,,,,,,,,,,,,,,,,,,YouTube,,,,,,,,,,,,,,,,,,,,,,,,,,,,14:58,,,,,,,,,,,,,,,,,,,,,,,,,
FEUHSPGP,webpage,,,ANSI C grammar (Lex),,,,,http://www.lysator.liu.se/c/ANSI-C-grammar-l.html,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/CI2NJQR2/ANSI-C-grammar-l.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ECUKLGDX,webpage,,,ANSI C grammar (Yacc),,,,,http://www.lysator.liu.se/c/ANSI-C-grammar-y.html,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/X5IE5ELS/ANSI-C-grammar-y.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
3WY2IQN7,encyclopediaArticle,2020,,Compiler Description Language,Wikipedia,,,,https://en.wikipedia.org/w/index.php?title=Compiler_Description_Language&oldid=968530811,"Compiler Description Language (CDL), is a programming language based on affix grammars. It is very similar to Backus–Naur form (BNF) notation. It was designed for the development of compilers. It is very limited in its capabilities and control flow; and intentionally so. The benefits of these limitations are twofold. On the one hand they  make possible the sophisticated data and control flow analysis used by the CDL2 optimizers resulting in extremely efficient code. The other benefit is that they foster a highly verbose naming convention. This in turn leads to programs that are to a great extent self-documenting. The language looks a bit like Prolog (this is not surprising since both languages arose at about the same time out of work on affix grammars). As opposed to Prolog however, control flow in CDL is deterministically based on success/failure i.e., no other alternatives are tried when the current one succeeds.  This idea is also used in parsing expression grammars. CDL3 is the third version of the CDL language, significantly different from the previous two versions.",2020-07-19,,,,,,,,,,,,,,en,Creative Commons Attribution-ShareAlike License,,,,Wikipedia,,Page Version ID: 968530811,,/Users/harrykd/Zotero/storage/8PDQ535S/index.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GWZXFRV7,webpage,,"Godbolt, Matt",Compiler Explorer,,,,,https://godbolt.org/,"Compiler Explorer is an interactive online compiler which shows the assembly output of compiled C++, Rust, Go (and many more) code.",,,,,,,,,,,,,,,en,,,,,,,,,/Users/harrykd/Zotero/storage/S9K2XLI8/godbolt.org.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AKM7Q33S,computerProgram,2020,"Segal, Loren",lsegal/my_toy_compiler,,,,,https://github.com/lsegal/my_toy_compiler,My Toy Compiler. Read about how I did it at the homepage URL,2020-08-22,,,,,,,,,,,,,,,"MIT License         ,                 MIT License",,,,GitHub,,original-date: 2009-09-18T18:46:35Z,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,C++,,,,,,,,,
I7IFTZUQ,webpage,,,Welcome to Lark’s documentation! — Lark documentation,,,,,https://lark-parser.readthedocs.io/en/latest/,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/3V7WSB5S/latest.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ELZ3QH9F,webpage,,,Write a Compiler,,,,,http://www.dabeaz.com/compiler.html,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/SIZ9GK3S/compiler.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HU98CVKA,computerProgram,2020,"Warzyński, Andrzej",banach-space/llvm-tutor,,,,,https://github.com/banach-space/llvm-tutor,A collection of out-of-tree LLVM passes for teaching and learning,2020-08-20,,,,,,,,,,,,,,,"MIT License         ,                 MIT License",,,,GitHub,,original-date: 2019-03-25T20:44:46Z,,,,,compiler; cplusplus; llvm; llvm-ir; llvm-pass; llvm-tutor; llvm-tutorial; plugin; tutorial,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,C++,,,,,,,,,
YLTLMHRB,webpage,,,LLVM Download Page,,,,,https://releases.llvm.org/download.html#3.3,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/HHFTPZ4E/download.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZHUQBBW8,webpage,,,Calc++ Parsing Driver (Bison 3.7.1),,,,,https://www.gnu.org/software/bison/manual/html_node/Calc_002b_002b-Parsing-Driver.html,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/KUM9KBKK/Calc_002b_002b-Parsing-Driver.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
U4X6282P,computerProgram,2020,"Estes, Will",westes/flex,,,,,https://github.com/westes/flex,The Fast Lexical Analyzer,2020-08-24,,,,,,,,,,,,,,,"View license         ,                 View license",,,,GitHub,,original-date: 2013-11-19T10:19:33Z,,,,,c; flex; lexer; lexer-generator,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,C,,,,,,,,,
YQ7G2I4E,webpage,,,PLY (Python Lex-Yacc),,,,,https://www.dabeaz.com/ply/ply.html,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/GJFM9MES/ply.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
8Y8STFBY,journalArticle,,"Musthafa, Mohammed",An axiomatic basis for computer programming,Communications of the ACM,,,,https://www.academia.edu/1972195/An_axiomatic_basis_for_computer_programming,An axiomatic basis for computer programming,,,,,,,,,,,,,,,en,,,,,www.academia.edu,,,,/Users/harrykd/Zotero/storage/UBSKKGH2/An_axiomatic_basis_for_computer_programming.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
K94E3VV6,journalArticle,,"Klint, Paul",Incremental Generation of Parsers,,,,,https://www.academia.edu/3130864/Incremental_Generation_of_Parsers,Incremental Generation of Parsers,,,,,,,,,,,,,,,en,,,,,www.academia.edu,,,,/Users/harrykd/Zotero/storage/AYMY9DCP/Incremental_Generation_of_Parsers.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
N92SFSCH,journalArticle,,"Barnard, David T.; Holt, Richard C.",Hierarchic syntax error repair for LR grammars,International Journal of Computer &amp; Information Sciences,,0091-7036,,https://www.academia.edu/11834112/Hierarchic_syntax_error_repair_for_LR_grammars,"A description of a technique for handling syntax errors in compilers, called hierarchic error repair, is presented. The technique is simple to understand and to implement. It always repairs a source program into a syntactically valid program and",,231-258,,4,11,,,,,,,,,,en,,,,,www.academia.edu,,,,/Users/harrykd/Zotero/storage/VHFZ62J7/Hierarchic_syntax_error_repair_for_LR_grammars.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TCYVWFIT,journalArticle,,"Daniel, Jack",Compiler Construction using Flex and Bison,,,,,https://www.academia.edu/35713037/Compiler_Construction_using_Flex_and_Bison,copiler design lecture,,,,,,,,,,,,,,,en,,,,,www.academia.edu,,,,/Users/harrykd/Zotero/storage/IENV5J56/Compiler_Construction_using_Flex_and_Bison.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FV2F99VL,journalArticle,,"Ala-Mutka, Kirsti",PROBLEMS IN LEARNING AND TEACHING PROGRAMMING,,,,,,,,13,,,,,,,,,,,,,en,,,,,Zotero,,,,/Users/harrykd/Zotero/storage/WBD5EGWM/Ala-Mutka - PROBLEMS IN LEARNING AND TEACHING PROGRAMMING.pdf,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZWGRLRHD,webpage,,,(PDF) Teaching English based programming courses to English learners/non-native speakers of English,ResearchGate,,,,https://www.researchgate.net/publication/304024941_Teaching_English_based_programming_courses_to_English_learnersnon-native_speakers_of_English,"PDF | On Feb 14, 2014, Ashok Kumar Veerasamy published Teaching English based programming courses to English learners/non-native speakers of English | Find, read and cite all the research you need on ResearchGate",,,,,,,,,,,,,,,en,,,,,,,,,/Users/harrykd/Zotero/storage/NNF73Y4U/304024941_Teaching_English_based_programming_courses_to_English_learnersnon-native_speakers_of_.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
VC9MVSZD,webpage,,"Petricek, Tomas",What to teach as the first programming language and why,,,,,http://tomasp.net/blog/2019/first-language/,"Rather than answering the question in the title of the essay, I will look at a much more interesting question: what art the kinds of arguments that are employed to support a particular choice? Following this perspective lets us learn what educators consider important in computer science and allow us to make our debates about education more informed.",,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/26IVZ79G/first-language.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DTGN5UD6,journalArticle,,"Esa, Nur Lidiana Edyanti Mohd",Developing Computational Thinking in Compulsory Education 2016 EUR 28295 EN,,,,,https://www.academia.edu/33224922/Developing_Computational_Thinking_in_Compulsory_Education_2016_EUR_28295_EN,Developing Computational Thinking in Compulsory Education 2016 EUR 28295 EN,,,,,,,,,,,,,,,en,,,,,www.academia.edu,,,,/Users/harrykd/Zotero/storage/LT6MPJHV/Developing_Computational_Thinking_in_Compulsory_Education_2016_EUR_28295_EN.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GPKCGHXJ,blogPost,2016,,Three Techies in Chennai Have Made It Possible for Students to Learn Programming in Indian Languages,The Better India,,,,https://www.thebetterindia.com/75103/guvi-computer-programming-chennai-intel-ekuka/,A one-stop solution for many students.,2016-11-15,,,,,,,,,,,,,,en-US,,,,,,,,,/Users/harrykd/Zotero/storage/E8J4EKMX/guvi-computer-programming-chennai-intel-ekuka.html,,Similar System,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GTJJVHG9,webpage,,,(PDF) Role and Status of English and Other Languages in Nepal,ResearchGate,,,,https://www.researchgate.net/publication/321528714_Role_and_Status_of_English_and_Other_Languages_in_Nepal,"PDF | p>This paper analyses the role and status of English and other languages in Nepal as well as talks about the attitude of several agents towards... | Find, read and cite all the research you need on ResearchGate",,,,,,,,,,,,,,,en,,,,,,,DOI: 10.3126/nelta.v21i1-2.20206,,/Users/harrykd/Zotero/storage/PAT2RTHL/321528714_Role_and_Status_of_English_and_Other_Languages_in_Nepal.html; /Users/harrykd/Zotero/storage/4MZNY8LF/(PDF) Role and Status of English and Other Languag.pdf,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CVFDEZB7,blogPost,2017,"Forum, NELTA ELT",English in Nepal: From a Guest Language to the Best Language,NELTA ELT Forum,,,,https://neltaeltforum.wordpress.com/2017/08/05/english-in-nepal-from-a-guest-language-to-the-best-language/,"*Kumar Narayan Shrestha Abstract The history of English in Nepal was first recorded in the seventeenth century.Although English was adopted as a foreign language in Nepal in the past, it has gained…",2017-08-05,,,,,,,English in Nepal,,,,,,,en,,,,,,,,,/Users/harrykd/Zotero/storage/HIN25S4K/english-in-nepal-from-a-guest-language-to-the-best-language.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
F9LWFTVW,computerProgram,2020,"Fertig, Andreas",andreasfertig/cppinsights,,,,,https://github.com/andreasfertig/cppinsights,C++ Insights,2020-08-28,,,,,,,,,,,,,,,"MIT License         ,                 MIT License",,,,GitHub,,original-date: 2018-04-29T16:21:08Z,,,,,cpp; cplusplus; llvm; ast; clang; cplusplus-11; cplusplus-14; cplusplus-17; cplusplus-20; cpp11; cpp14; cpp17; cpp20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,C++,,,,,,,,,
8ZNE4JLU,webpage,,,Syntax Highlight Guide,,,,,https://code.visualstudio.com/api/language-extensions/syntax-highlight-guide,A guide to syntax highlighting,,,,,,,,,,,,,,,en,,,,,,,,,/Users/harrykd/Zotero/storage/85HTR73W/syntax-highlight-guide.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
8BFCRJ2N,webpage,,,francois-rozet/vsop-compiler,GitHub,,,,https://github.com/francois-rozet/vsop-compiler,Implementation of a VSOP compiler. Contribute to francois-rozet/vsop-compiler development by creating an account on GitHub.,,,,,,,,,,,,,,,en,,,,,,,,,/Users/harrykd/Zotero/storage/ZG7XSC2Y/vsop.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DX9WHTAE,webpage,,,"Flex and Bison in C++, a short example",jonathanbeard.io,,,,http://www.jonathanbeard.io/tutorials/FlexBisonC++,How to get flex and bison to work together in C++,,,,,,,,,,,,,,,en,,,,,,,,,/Users/harrykd/Zotero/storage/5JFGY6GE/FlexBisonC++.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
P889RHKC,encyclopediaArticle,2020,,Non-English-based programming languages,Wikipedia,,,,https://en.wikipedia.org/w/index.php?title=Non-English-based_programming_languages&oldid=975354456,Non-English-based programming languages are programming languages that do not use keywords taken from or inspired by English vocabulary.,2020-08-28,,,,,,,,,,,,,,en,Creative Commons Attribution-ShareAlike License,,,,Wikipedia,,Page Version ID: 975354456,,/Users/harrykd/Zotero/storage/IDSSQREX/index.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GZS42KQR,webpage,,"Resnick, Mitchel",Introducing Scratch 3.0: Expanding the creative possibilities of coding,MIT Media Lab,,,,https://www.media.mit.edu/posts/introducing-scratch-3-0-expanding-the-creative-possibilities-of-coding/,"The next generation of Scratch expands how, what, and where kids can create with code.",,,,,,,,Introducing Scratch 3.0,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/DPBNMFSS/introducing-scratch-3-0-expanding-the-creative-possibilities-of-coding.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HTZPUWXR,webpage,,,Coding Is for Everyone—as Long as You Speak English | WIRED,,,,,https://www.wired.com/story/coding-is-for-everyoneas-long-as-you-speak-english/,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HWL3DS4X,webpage,,,Hindi Programming Language by Shamit Kumar Tomar | SKT Network Technologies,,,,,https://web.archive.org/web/20121001163914/http://www.sktnetwork.com/portfolio/hindi-programming-language,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/PDMLP6EX/hindi-programming-language.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ZFPQ2NII,webpage,,,Hindi Programming Language by Shamit Kumar Tomar | SKT Network Technologies,,,,,https://web.archive.org/web/20121001163914/http://www.sktnetwork.com/portfolio/hindi-programming-language,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/GW5PBPYU/hindi-programming-language.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LPYG4H3D,webpage,,,Visual Studio Code - Code Editing. Redefined,,,,,https://code.visualstudio.com/,"Visual Studio Code is a code editor redefined and optimized for building and debugging modern web and cloud applications.  Visual Studio Code is free and available on your favorite platform - Linux, macOS, and Windows.",,,,,,,,,,,,,,,en,,,,,,,,,/Users/harrykd/Zotero/storage/XKE2FLGH/code.visualstudio.com.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
D3BVV6GR,webpage,,,PLY (Python Lex-Yacc) — ply 4.0 documentation,,,,,https://ply.readthedocs.io/en/latest/,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/XQAATZGB/latest.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
5CUHEZS6,webpage,,,PLY (Python Lex-Yacc),,,,,https://www.dabeaz.com/ply/ply.html,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/MBXN7WGA/ply.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RHWWGBLG,webpage,,,Mind Map & Brainstorm Ideas,Mind Map & Brainstorm Ideas,,,,https://mindnode.com/,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/6VSES5ES/mindnode.com.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
K8LJI53E,webpage,,,Bison Parser (Bison 3.7.1),,,,,https://www.gnu.org/software/bison/manual/html_node/Bison-Parser.html,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/4ACYRPR6/Bison-Parser.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RHPGDMW6,webpage,,,About - Git,,,,,https://git-scm.com/about,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/ZIKVC68Z/about.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
PMZWJVY5,webpage,,,Mind Map & Brainstorm Ideas,Mind Map & Brainstorm Ideas,,,,https://mindnode.com/,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/2F569B4K/mindnode.com.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
GDFWAIVV,bookSection,2010,"Williams, Laurie",Agile Software Development Methodologies and Practices,Advances in Computers,,,,http://www.sciencedirect.com/science/article/pii/S0065245810800014,"Beginning in the mid-1990s, a number of consultants independently created and evolved what later came to be known as agile software development methodologies. Agile methodologies and practices emerged as an attempt to more formally and explicitly embrace higher rates of change in software requirements and customer expectations. Some prominent agile methodologies are Adaptive Software Development, Crystal, Dynamic Systems Development Method, Extreme Programming (XP), Feature-Driven Development (FDD), Pragmatic Programming, and Scrum. This chapter presents the principles that underlie and unite the agile methodologies. Then, 32 practices used in agile methodologies are presented. Finally, three agile methodologies (XP, FDD, and Scrum) are explained. Most often, software development teams select a subset of the agile practices and create their own hybrid software development methodology rather than strictly adhere to all the practices of a predefined agile methodology. Teams that use primarily agile practices are most often small- to medium-sized, colocated teams working on less complex projects.",2010-01-01,1-44,,,80,,,,Advances in Computers,,,,Elsevier,,en,,,,,ScienceDirect,,DOI: 10.1016/S0065-2458(10)80001-4,,/Users/harrykd/Zotero/storage/YNXGN3P2/S0065245810800014.html,,,,"Zelkowitz, Marvin V.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RTIEW3LZ,webpage,2018,"Rachiele, Gianpaul",Software Development Methodologies,Medium,,,,https://medium.com/@gianpaul.r/software-development-methodologies-a856883a7630,Almost every job interview I’ve been on and every job listing I’ve looked at mentions/requires something about the development process…,2018-04-09,,,,,,,,,,,,,,en,,,,,,,,,/Users/harrykd/Zotero/storage/FHUNYB49/software-development-methodologies-a856883a7630.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CZX6ERVV,webpage,,,"Prototyping Model in Software Engineering: Methodology, Process, Approach",,,,,https://www.guru99.com/software-engineering-prototyping-model.html,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/JK8DLL86/software-engineering-prototyping-model.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
EUWNNI7G,webpage,,,Tri-Cycle: a prototype methodology for advanced software development,,,,,https://www.computer.org/csdl/proceedings-article/hicss/1989/00048015/12OmNwdbV3G,"The use of prototyping is considered in the context of advanced military computing projects. One concern is the lack of a formal control process to monitor progress. To address this concern, a software development methodology is proposed that integrates evolutionary prototyping techniques and traditional planning and review activities. The methodology, Tri-Cycle, prescribes a framework that promotes a disciplined approach to better plan, monitor, and evaluate software development without impeding development progress. Early versions of the methodology are being integrated into existing projects. These versions have been well received by customers.<>",,,,,,,,Tri-Cycle,,,,,,,en,,,,,,,,,/Users/harrykd/Zotero/storage/BME3IVKG/12OmNwdbV3G.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
UXJ7U76P,webpage,,,SDLC - Waterfall Model - Tutorialspoint,,,,,https://www.tutorialspoint.com/sdlc/sdlc_waterfall_model.htm,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/NSFP227H/sdlc_waterfall_model.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
7HBYAFGU,blogPost,2020,,Difference between Compiler and Interpreter,GeeksforGeeks,,,,https://www.geeksforgeeks.org/difference-between-compiler-and-interpreter/,"A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",2020-04-12,,,,,,,,,,,,,,en-US,,,,,,,Section: Compiler Design,,/Users/harrykd/Zotero/storage/V9SHIN3U/difference-between-compiler-and-interpreter.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
83PHYTRR,webpage,,,Compiler Design - Symbol Table - Tutorialspoint,,,,,https://www.tutorialspoint.com/compiler_design/compiler_design_symbol_table.htm,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/SP4ZYRW8/compiler_design_symbol_table.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
4KSN6DMI,webpage,2018,Anil,English Language Statistics - an Exhaustive List,Lemon Grad,,,,https://lemongrad.com/english-language-statistics/,"1. How widely is English language used? 1.1 How many people speak English? At 1,121 million speakers (native + non-native), English is the most widely-spoken language in the world. Here is a comparison of number of speakers of most-spoken languages: Source: Ethnologue, 21st edition 1.2 Number of native and non-native English speakers There are 378 million native speakers (those who speak English as their first language) and 743 million non-native speakers (those who speak English as their second language) in the world. Source: Ethnologue, 21st edition 1.3 What % of English conversations involve only native speakers? If we listen to every conversation happening in the world, only 4 percent of the conversations involve only native speakers. Rest involve at least one non-native speaker. 1.4 English is the language on internet English is the dominant language on internet. Nearly 54 percent of content on the internet is in English. Russian, at 6 percent, is a distant second. (The data pertains to 10 million websites with most traffic.) Here is the top-10 […]",2018-12-05,,,,,,,,,,,,,,en-US,,,,,,,,,/Users/harrykd/Zotero/storage/QBVS3URC/english-language-statistics.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
EU3YZTND,journalArticle,2020,"Prat, Chantel S.; Madhyastha, Tara M.; Mottarella, Malayka J.; Kuo, Chu-Hsuan",Relating Natural Language Aptitude to Individual Differences in Learning Programming Languages,Scientific Reports,,2045-2322,10.1038/s41598-020-60661-8,https://www.nature.com/articles/s41598-020-60661-8,"This experiment employed an individual differences approach to test the hypothesis that learning modern programming languages resembles second “natural” language learning in adulthood. Behavioral and neural (resting-state EEG) indices of language aptitude were used along with numeracy and fluid cognitive measures (e.g., fluid reasoning, working memory, inhibitory control) as predictors. Rate of learning, programming accuracy, and post-test declarative knowledge were used as outcome measures in 36 individuals who participated in ten 45-minute Python training sessions. The resulting models explained 50–72% of the variance in learning outcomes, with language aptitude measures explaining significant variance in each outcome even when the other factors competed for variance. Across outcome variables, fluid reasoning and working-memory capacity explained 34% of the variance, followed by language aptitude (17%), resting-state EEG power in beta and low-gamma bands (10%), and numeracy (2%). These results provide a novel framework for understanding programming aptitude, suggesting that the importance of numeracy may be overestimated in modern programming education environments.",2020-03-02,3817,,1,10,,,,,,,,,,en,2020 The Author(s),,,,www.nature.com,,Number: 1 Publisher: Nature Publishing Group,,/Users/harrykd/Zotero/storage/DK4SD2UV/Prat et al. - 2020 - Relating Natural Language Aptitude to Individual D.pdf; /Users/harrykd/Zotero/storage/NGT8SRWC/s41598-020-60661-8.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JCY7TKR9,webpage,,,"What is Prototype model- advantages, disadvantages and when to use it?",,,,,http://tryqa.com/what-is-prototype-model-advantages-disadvantages-and-when-to-use-it/,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/M5UHA2K3/what-is-prototype-model-advantages-disadvantages-and-when-to-use-it.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
N9ATLSBE,webpage,2017,,The Pros and Cons of Waterfall Methodology,,,,,1,Learn about the pros and cons of the Waterfall methodology to determine if it's the right fit for your team.,2017-11-02,,,,,,,,,,,,,,en,,,,,,,,,/Users/harrykd/Zotero/storage/VVMJRIXP/pros-and-cons-of-waterfall-methodology.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
4KDW2JNC,blogPost,2015,,Agile Manifesto for Software Development | Agile Alliance,,,,,https://www.agilealliance.org/agile101/the-agile-manifesto/,"We value individuals & interactions, working software, customer collaboration & responding to change over processes/tools, documentation, negotiations & plans.",2015-06-29,,,,,,,,,,,,,,en-US,,,,,,,,,/Users/harrykd/Zotero/storage/VPR6G3U8/the-agile-manifesto.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JRUQP7NT,webpage,,,Manifesto for Agile Software Development,,,,,http://agilemanifesto.org/iso/en/manifesto.html,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/UJWBCD6K/manifesto.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
N2IVHZZS,blogPost,,"Team, Yodiz",Agile vs Prototyping,Yodiz Project Management Blog,,,,https://www.yodiz.com/blog/agile-vs-prototyping/,Agile vs Prototyping 1) What is Prototyping Prototyping is an attractive and feasible model for those complex and large systems which have no manual process …,,,,,,,,,,,,,,,en-US,,,,,,,,,/Users/harrykd/Zotero/storage/HSWSMJYK/agile-vs-prototyping.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
YGRATVMN,webpage,,,"Grammar: The language of languages (BNF, EBNF, ABNF and more)",,,,,http://matt.might.net/articles/grammars-bnf-ebnf/,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/KUGKTG62/grammars-bnf-ebnf.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
8EMZYTCV,webpage,,,Quickstart - Django REST framework,,,,,https://www.django-rest-framework.org/tutorial/quickstart/,,,,,,,,,,,,,,,,,,,,,,,,,/Users/harrykd/Zotero/storage/ZRCPR9ZY/quickstart.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
